

import importacion.Utils;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.io.File;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class ImageViewLabel extends javax.swing.JPanel {

	ScalableImageLabel imageLabel;

	public ImageViewLabel () {
		initComponents ();
		imageLabel = new ScalableImageLabel ();
		setLayout (new java.awt.BorderLayout ());
		add (imageLabel, java.awt.BorderLayout.CENTER);
	}

	public void showImage (File filePath) {
		File imgFilepath = filePath;
		if ("pdf".equals (Utils.getFileContentType (filePath)))
			imgFilepath = Utils.ConvertPDFToImage (filePath);
		imageLabel.showImage (imgFilepath);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setAutoscrolls(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
		// TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

	void clear () {
		imageLabel.showDefaultImage ();
	}

	public void out (String msg) {
		System.out.println (msg);
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

	public static void main (String args[]) {
		JFrame jf = new JFrame ();
		ImageViewLabel iv = new ImageViewLabel ();
		jf.setSize (800, 600);
		jf.add (iv);
		jf.setLocationRelativeTo (null);
		jf.setVisible (true);
	}}

class ScalableImageLabel extends JLabel {

	Image image;
	Dimension imgDim;
	String defaultImagePath;
	int zoom = 1;
	int x, y;
	boolean zoomFlag = false;      // if image is zoomed or not
	boolean repaintFlag = false;  // if repaint was external or local

	public ScalableImageLabel () {
		URL imageURL = getClass ().getClassLoader ().getResource ("resources/images/cartaporte-ejemplo.png");
		defaultImagePath = imageURL.toString ();
		showImage (new File (imageURL.getPath ()));

		addMouseListener (new java.awt.event.MouseAdapter () {
			public void mouseClicked (java.awt.event.MouseEvent evt) {
				onMouseClicked (evt);
			}
		});
		addMouseMotionListener (new java.awt.event.MouseMotionAdapter () {
			public void mouseDragged (java.awt.event.MouseEvent evt) {
				formMouseDragged (evt);
			}
		});
	}

	private void formMouseDragged (java.awt.event.MouseEvent evt) {
		int x = evt.getX ();
		int y = evt.getY ();

		out (String.format (">>> Mouse dragging in x: %s, y %s", x, y));
	}

	// Get mouse events for zooming in / out	
	private void onMouseClicked (java.awt.event.MouseEvent evt) {
		out ("Mouse clicked on label");
		//zoomFlag = !zoomFlag;
		zoomFlag = true;
		repaintFlag = true;
		x = evt.getX ();
		y = evt.getY ();
		zoom += 1;
		repaint ();
	}

	protected void paintComponent (Graphics g) {  
		ImageIcon icon = (ImageIcon) getIcon ();
		Image imgIcon = icon.getImage();
		
		if (icon != null)
			if (zoomFlag == false || repaintFlag == false) {
				imgDim = drawScaledImage (icon.getImage (), g);
				zoomFlag = false;
			} else { 
				// Zoom in and relocate new image to get centered around x,y click
				
				int iw = imgDim.width, ih = imgDim.height;
				int iwz = iw *zoom, ihz = ih * zoom;    // zoom by 3
				Point pos = getXYZoom (iw, ih, iwz, ihz);
				out (String.format ("x:%s, y: %s, Pos.x::%s, Pos.y: %s", x, y, pos.x, pos.y)); 
				
				int pw = getWidth (), ph = getHeight ();
				double rx = (double) iwz / iw, ry = (double) ihz / ih;
				//out (String.format ("iw:%s, ih: %s, pw:%s, ph:%s, rx:%s, ry:%s", iw, ih, pw, ph, rx, ry));

				// Get initial positions before zoom
				int dx = (pw - iw) / 2 + 1, dy = (ph - ih) / 2 + 1;
				int xi = (int) (x - dx), yi = (int) (y - dy);
				//out (String.format ("x:%s, y:%s, xi:%s, yi:%s, dx:%s, dy:%s", x,y, xi, yi, dx, dy));
				x =x/zoom ; y = y/zoom;

				// Get initial positions after zoom
				int xz = (int) (xi * rx), yz = (int) (yi * ry);
				int nx = xz - xi - dx, ny = yz - yi - dy;
				//out (String.format ("xz: %s, yz:%s", xz, yz));
				
				g.drawImage (icon.getImage (), -nx, -ny, iwz, ihz, null);
				//imgDim = new Dimension (iwz, ihz);
				x = pos.x ; y = pos.y;
				repaintFlag = false;
			}
	}
	Point getXYZoom (int w, int h, int wz, int hz) {
		int z = zoom;
		int wp = w - x;
		int hp = h - y;
		int wpz = z*wp;
		int hpz = z*hp;
		
		int xo = (wz-wpz)/z;
		int yo = (hz - hpz)/z;
		return (new Point (xo, yo));	
	} 

	public Dimension drawScaledImage (Image image, Graphics g) {
		int imgWidth = image.getWidth (null);
		int imgHeight = image.getHeight (null);

		double imgAspect = (double) imgHeight / imgWidth;

		int canvasWidth = this.getParent ().getWidth ();
		int canvasHeight = this.getParent ().getHeight ();

		//System.out.println (">>> " + "Canvas:" + " Width: " + canvasWidth + " Height: " + canvasHeight);
		//System.out.println (">>> " + "Image:" + " Width: " + iw + " Height: " + ih);
		double canvasAspect = (double) canvasHeight / canvasWidth;

		double x1 = 0; // top left X position
		double y1 = 0; // top left Y position
		double x2 = 0; // bottom right X position
		double y2 = 0; // bottom right Y position

		if (imgWidth < canvasWidth && imgHeight < canvasHeight) {
			// the image is smaller than the canvas
			x1 = (canvasWidth - imgWidth) / 2;
			y1 = (canvasHeight - imgHeight) / 2;
			x2 = imgWidth + x1;
			y2 = imgHeight + y1;
		} else {
			if (canvasAspect > imgAspect) {
				y1 = canvasHeight;
				// keep image aspect ratio
				canvasHeight = (int) (canvasWidth * imgAspect);
				y1 = (y1 - canvasHeight) / 2;
			} else {
				x1 = canvasWidth;
				// keep image aspect ratio
				canvasWidth = (int) (canvasHeight / imgAspect);
				x1 = (x1 - canvasWidth) / 2;
			}
			x2 = canvasWidth + x1;
			y2 = canvasHeight + y1;
		}
		//System.out.println (">>> " + "xxx1: " + x1 + " y1: " + y1 + " x2: " + x2 + " y2: " + y2);

		g.drawImage (image, (int) x1, (int) y1, (int) x2, (int) y2, 0, 0, imgWidth, imgHeight, null);
		//this.getParent ().setSize (new Dimension (iw, ih));
		return (new Dimension ((int) (x2 - x1), (int) (y2 - y1)));
	}

	public void showImage (File filePath) {
		try {
			image = ImageIO.read (filePath);
			setIcon (new ImageIcon (image));
		} catch (Exception ex) {
			System.err.println (ex);
		}
		repaint ();
	}

	public void showDefaultImage () {
		showImage (new File (defaultImagePath));
	}

	public void zoom (String zoomType, int x, int y) {
		this.x = x;
		this.y = y;
		if (zoomType.equals ("zoomin"))
			zoom += 600; //imgHeight += 0.1;
		else
			zoom -= 800;
		repaint ();
	}

	public void out (String msg) {
		System.out.println (msg);
	}

}
